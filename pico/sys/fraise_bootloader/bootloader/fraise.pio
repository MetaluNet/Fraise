;
; Copyright (c) 2023 metalu.net
;
; SPDX-License-Identifier: BSD-3-Clause
;

.program fraise
.side_set 1 opt pindirs

; 9n1 UART receiver which handles framing errors and break conditions more gracefully.
; IN pin 0 and JMP pin are both mapped to the GPIO used as UART RX.
; OUT pin 0 and side-set pin 0 are both mapped to UART TX pin
; SET pin 0 is DRV pin

rxsetup:
    set pindirs 0   side 0      ; Release DRV and TX pins
rxstart:
    wait 0 pin 0            [4] ; Stall until start bit is asserted
    set x, 8                [6] ; Preload bit counter, then delay until halfway through
rxbitloop:                      ; the first data bit (12 cycles incl wait, set).
    in pins, 1                  ; Shift data bit into ISR
    jmp x-- rxbitloop       [6] ; Loop 9 times, each loop iteration is 8 cycles
    jmp pin good_stop           ; Check stop bit (should be high)

    irq 4 rel                   ; Either a framing error or a break. Set a sticky flag,
    wait 1 pin 0                ; and wait for line to return to idle state.
    jmp rxstart                 ; Don't push data if we didn't see good framing.

good_stop:
    push                        ; Push ISR to FIFO.
    jmp rxstart                 ; No delay before returning to start; a little slack is
                                ; important in case the TX clock is slightly too fast.

PUBLIC txstart:
    set pindirs 1 side 0        ; Activate DRV pin, release TX pin
    pull                        ; Get first byte,
    mov y osr                   ; move it to y (byte counter)
txnext:
    pull                        ; Stall with line in idle state
    mov OSR ! OSR               ; invert OSR since we are driving TX pin dir with a pull-up, with TX pin = 0 (so if pindir=1 then out_level=0, if pindir=0 then out_level=1)
    set x, 8    side 1      [7] ; Preload bit counter, assert start bit for 8 clocks
txbitloop:                      ; This loop will run 9 times (9n1 UART)
    out pindirs, 1              ; Shift 1 bit from OSR to the first OUT pin
    jmp x-- txbitloop       [6] ; Each loop iteration is 8 cycles.
    jmp y-- txnext side 0   [7] ; Assert stop bit, the goto send remaining bytes if any, otherwise return to rx.


% c-sdk {
#include "hardware/clocks.h"
#include "hardware/gpio.h"

#define FRAISE_BAUDRATE 250000

static uint jmp_tx; // jump to TX instruction

static inline void fraise_program_init(PIO pio, uint sm, uint offset, uint rxpin, uint txpin, uint drvpin) {
    pio_sm_config c = fraise_program_get_default_config(offset);

// setup RX
    pio_sm_set_consecutive_pindirs(pio, sm, rxpin, 1, false);
    pio_gpio_init(pio, rxpin);
    gpio_pull_up(rxpin);

    sm_config_set_in_pins(&c, rxpin); // for WAIT, IN
    sm_config_set_jmp_pin(&c, rxpin); // for JMP
    // Shift to right, autopush disabled
    sm_config_set_in_shift(&c, true, false, 32);

// setup TX
    pio_sm_set_pins_with_mask(pio, sm, 0, (1u << txpin) | (1u << drvpin)); // init tx and drv pins as LOW
    pio_sm_set_pindirs_with_mask(pio, sm, 0, (1u << txpin) | (1u << drvpin)); // init tx and drv pindirs as INPUT
    pio_gpio_init(pio, txpin);
    pio_gpio_init(pio, drvpin);
    gpio_pull_up(txpin);
    gpio_pull_up(drvpin);

    // OUT shifts to right, no autopull
    sm_config_set_out_shift(&c, true, false, 32);
    // We are mapping both OUT and side-set to the same pin, because sometimes
    // we need to assert user data onto the pin (with OUT) and sometimes
    // assert constant values (start/stop bit)
    sm_config_set_out_pins(&c, txpin, 1);
    sm_config_set_sideset_pins(&c, txpin);
    sm_config_set_set_pins(&c, drvpin, 1);

// encode set_y and jmp_tx instructions
    jmp_tx = pio_encode_jmp (offset + fraise_offset_txstart);

// clock
    // SM transmits 1 bit per 8 execution cycles.
    float div = (float)clock_get_hz(clk_sys) / (8 * FRAISE_BAUDRATE);
    sm_config_set_clkdiv(&c, div);
    
// finish
    pio_sm_init(pio, sm, offset, &c);
    pio_sm_set_enabled(pio, sm, true);
}

static inline uint16_t fraise_program_getc(PIO pio, uint sm) {
    return (uint16_t)(pio->rxf[sm] >> 23);
}

static inline void fraise_program_start_tx(PIO pio, uint sm, uint8_t count) {
    pio_sm_exec_wait_blocking (pio, sm, jmp_tx);
    pio_sm_put_blocking(pio, sm, (uint32_t)(count - 1)); // first word is length-1
    //pio_sm_put(pio, sm, (uint32_t)(count - 1)); // first word is length-1
}

static inline void fraise_program_putc(PIO pio, uint sm, char c) {
    pio_sm_put_blocking(pio, sm, (uint32_t)c);
    //pio_sm_put(pio, sm, (uint32_t)c);
}

%}
